---
title: "Fundamentos de ciencia de datos con R - M√≥dulo 1"
subtitle: "Clase 5: Progamaci√≥n b√°sica en R: if, while, for"
author: "CEPAL - Unidad de Estad√≠sticas Sociales"
date: "`r Sys.Date()`"
format: 
  beamer: 
    # theme: "CambridgeUS"
    colortheme: dove
    fonttheme: professionalfonts
    # incremental: true
    aspectratio: 1610
    #theme: Berkeley
    toc: false
    mermaid: true  
    slide_level: 2
    #highlight: pygments
Email: andres.gutierrez@cepal.org
lang: es
editor_options:
  markdown:
    wrap: 90
---

```{r setup, include=FALSE}
# Configuraci√≥n inicial: No mostrar mensajes ni warnings
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(printr)
```

# Introducci√≥n

La programaci√≥n es la base de la automatizaci√≥n en ciencia de datos.  
En R, permite **tomar decisiones, repetir tareas y controlar el flujo l√≥gico del an√°lisis**, haciendo los procesos m√°s eficientes y reproducibles.

A trav√©s de estructuras como `if`, `while` y `for`, podemos ense√±ar al programa **qu√© hacer, cu√°ndo hacerlo y cu√°ntas veces hacerlo**.  
Estas herramientas son esenciales para pasar de ejecutar comandos sueltos a escribir scripts din√°micos y escalables.

# ¬øQu√© es la programaci√≥n estructurada?

La programaci√≥n estructurada organiza el c√≥digo en bloques l√≥gicos que **siguen un flujo claro de ejecuci√≥n**.  
Este enfoque se basa en tres principios:

- **Secuencia:** ejecutar instrucciones en orden.  
- **Selecci√≥n:** tomar decisiones con `if`.  
- **Iteraci√≥n:** repetir acciones con `while` o `for`.

# ¬øQu√© es la programaci√≥n estructurada?

:::{.callout-note}
### üß≠ Ejemplo de flujo l√≥gico
Si la base de datos tiene valores faltantes ‚Üí mostrar advertencia.  
Mientras existan valores faltantes ‚Üí imputarlos.  
Para cada variable ‚Üí calcular promedio y desviaci√≥n est√°ndar.
:::

# Estructura condicional ‚Äì `if` y `else`

Permite **tomar decisiones** en funci√≥n de una condici√≥n l√≥gica.

**Sintaxis b√°sica**


```{r, echo=TRUE, include=TRUE, eval=FALSE}

if (condici√≥n) {
  # c√≥digo si la condici√≥n es verdadera
} else {
  # c√≥digo si la condici√≥n es falsa
```

# Estructura condicional ‚Äì `if` y `else`

**Ejemplo**

```{r, echo=TRUE, include=TRUE}

x <- 10

if (x > 5) {
  print("x es mayor que 5")
} else {
  print("x es menor o igual que 5")
}
```

# Estructura condicional ‚Äì `if` y `else`

:::{.callout-note}
El bloque if eval√∫a una condici√≥n l√≥gica (TRUE/FALSE).
Si se cumple (TRUE), ejecuta el c√≥digo; si no, pasa al bloque else.
:::

# Estructura repetitiva ‚Äì while

El bucle while ejecuta un bloque de c√≥digo mientras una condici√≥n sea verdadera.

```{r, echo=TRUE, include=TRUE, eval=FALSE}

while (condici√≥n) {
  # instrucciones a repetir
}
```

# Estructura repetitiva ‚Äì while

**Ejemplo**

```{r, echo=TRUE, include=TRUE}

contador <- 1

while (contador <= 5) {
  print(paste("Iteraci√≥n", contador))
  contador <- contador + 1
}
```

# Estructura repetitiva ‚Äì while

:::{.callout-warning}

Si la condici√≥n nunca cambia a FALSE, el bucle se vuelve infinito.
Siempre aseg√∫rate de actualizar la variable dentro del while.
:::

# Estructura repetitiva ‚Äì for

El bucle for se usa cuando sabemos cu√°ntas veces queremos repetir algo.

**Sintaxis**
```{r, echo=TRUE, include=TRUE, eval=FALSE}

for (variable in secuencia) {
  # c√≥digo a ejecutar
}
```

# Estructura repetitiva ‚Äì for

**Ejemplo**

```{r, echo=TRUE, include=TRUE}

for (i in 1:5) {
  print(paste("Iteraci√≥n n√∫mero", i))
}
```

# Estructura repetitiva ‚Äì for

:::{.callout-note}
La variable i cambia autom√°ticamente en cada ciclo.
Podemos recorrer vectores, listas o secuencias num√©ricas.
:::

# Combinando estructuras

Podemos mezclar bucles y condiciones para generar rutinas m√°s inteligentes.

```{r, echo=TRUE, include=TRUE}

for (i in 1:6) {
  if (i %% 2 == 0) {
    print(paste(i, "es par"))
  } else {
    print(paste(i, "es impar"))
  }
}
```

Este ejemplo recorre los n√∫meros del 1 al 6 e imprime si cada uno es par o impar.

# Control adicional en bucles

R permite controlar los bucles con dos comandos:

| Comando | Descripci√≥n                     | Ejemplo             |
| ------- | ------------------------------- | ------------------- |
| `break` | Detiene el bucle inmediatamente | `if (i == 5) break` |
| `next`  | Salta a la siguiente iteraci√≥n  | `if (i == 3) next`  |

# Control adicional en bucles

**Ejemplo**

```{r, echo=TRUE, include=TRUE}

for (i in 1:5) {
  if (i == 3) next
  print(i)
}
```

Resultado: 1, 2, 4, 5 (salta el 3).

:::{.callout-note}
Usa next para omitir casos espec√≠ficos y break para detener el bucle por completo.
:::

# Ejemplo aplicado

Clasificar una lista de valores seg√∫n sean positivos, negativos o cero:


```{r, echo=TRUE, include=TRUE}

valores <- c(-3, 0, 5, -1, 2)

for (v in valores) {
  if (v > 0) {
    print(paste(v, "es positivo"))
  } else if (v < 0) {
    print(paste(v, "es negativo"))
  } else {
    print(paste(v, "es cero"))
  }
}
```

